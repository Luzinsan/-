digraph "classes" {
rankdir=BT
charset="utf-8"
"app.main.App" [color="black", fontcolor="black", label=<{App|archs_container : DragSourceContainer<br ALIGN="LEFT"/>dataset_container : DragSourceContainer<br ALIGN="LEFT"/>layer_container : DragSourceContainer<br ALIGN="LEFT"/>left_panel<br ALIGN="LEFT"/>node_editor : NodeEditor<br ALIGN="LEFT"/>plugin_menu_id<br ALIGN="LEFT"/>plugins : list<br ALIGN="LEFT"/>right_panel<br ALIGN="LEFT"/>|__init__()<br ALIGN="LEFT"/>add_plugin(name, callback)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>update()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"app.trash.CustomDataset" [color="black", fontcolor="black", label=<{CustomDataset|<br ALIGN="LEFT"/>|__init__(root: str, train: bool, download: bool, transform): None<br ALIGN="LEFT"/>copy_dataset(sender, app_data, train_params__file: tuple[2])<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"app.lightning_data.DataModule" [color="black", fontcolor="black", label=<{DataModule|train<br ALIGN="LEFT"/>val<br ALIGN="LEFT"/>|__init__(dataset_class, transforms)<br ALIGN="LEFT"/>train_dataloader()<br ALIGN="LEFT"/>val_dataloader()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"app.lightning_module.Module" [color="black", fontcolor="black", label=<{Module|accept_init : list<br ALIGN="LEFT"/>loss_func<br ALIGN="LEFT"/>lr<br ALIGN="LEFT"/>net<br ALIGN="LEFT"/>optimizer<br ALIGN="LEFT"/>|__init__(sequential, optimizer, lr, loss_func)<br ALIGN="LEFT"/>accuracy(Y_hat, Y, averaged)<br ALIGN="LEFT"/>apply_init(inputs, init)<br ALIGN="LEFT"/>configure_optimizers()<br ALIGN="LEFT"/>forward(X)<br ALIGN="LEFT"/>init_cnn(module)<br ALIGN="LEFT"/>layer_summary(X_shape)<br ALIGN="LEFT"/>loss(Y_hat, Y, averaged)<br ALIGN="LEFT"/>metric(batch, mode, averaged)<br ALIGN="LEFT"/>training_step(batch)<br ALIGN="LEFT"/>validation_step(batch)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"app.pipeline.Pipeline" [color="black", fontcolor="black", label=<{Pipeline|accept_init : list<br ALIGN="LEFT"/>debug : bool<br ALIGN="LEFT"/>max_epochs<br ALIGN="LEFT"/>net<br ALIGN="LEFT"/>pipeline : list<br ALIGN="LEFT"/>task : Task<br ALIGN="LEFT"/>train_params : dict<br ALIGN="LEFT"/>trainer : Trainer<br ALIGN="LEFT"/>|__init__(init_node: 'nodes.DataNode')<br ALIGN="LEFT"/>collect_layers(node: Node)<br ALIGN="LEFT"/>flow(sender, app_data, data_node: 'nodes.DataNode', fake)<br ALIGN="LEFT"/>get_params(params_node: Node): dict<br ALIGN="LEFT"/>init_dataloader(data_node: Node)<br ALIGN="LEFT"/>init_layer(layer: Node): Any<br ALIGN="LEFT"/>init_normal(module: nn.Module)<br ALIGN="LEFT"/>init_xavier(module)<br ALIGN="LEFT"/>keep_train(sender, app_data, data_node: 'nodes.DataNode')<br ALIGN="LEFT"/>load_weight(sender, app_data, train_params__file)<br ALIGN="LEFT"/>save_weight(sender, app_data, train_params__file)<br ALIGN="LEFT"/>train(fake)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"app.trash.ProgressBoard" [color="black", fontcolor="black", label=<{ProgressBoard|enable : bool<br ALIGN="LEFT"/>task<br ALIGN="LEFT"/>widget : ViewNode_2D<br ALIGN="LEFT"/>x : int<br ALIGN="LEFT"/>|__init__(task, widget)<br ALIGN="LEFT"/>disable()<br ALIGN="LEFT"/>get_metrics(trainer, model)<br ALIGN="LEFT"/>on_train_batch_end(trainer, pl_module, outputs, batch, batch_idx)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"app.lightning_module.Module" -> "app.pipeline.Pipeline" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="net", style="solid"];
}
